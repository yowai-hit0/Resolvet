// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}


enum UserRole {
  super_admin
  admin
  agent
  customer
}

enum TicketStatus {
  New
  Assigned
  In_Progress
  On_Hold
  Resolved
  Closed
  Reopened
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  password_hash String
  first_name    String
  last_name     String
  role          UserRole
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now()) @map("created_at")
  updated_at    DateTime   @updatedAt @map("updated_at")
  tickets_created Ticket[] @relation("TicketCreatedBy")
  tickets_assigned Ticket[] @relation("TicketAssignedTo")
  comments      Comment[]
  ticket_events TicketEvent[]
  attachments   Attachment[]

  @@map("users")
}

model Ticket {
  id              Int        @id @default(autoincrement())
  ticket_code     String     @unique
  subject         String
  description     String
  requester_email String?
  requester_name  String
  requester_phone String
  location        String?
  status          TicketStatus @default(New)
  created_at      DateTime   @default(now()) @map("created_at")
  updated_at      DateTime   @updatedAt @map("updated_at")
  resolved_at     DateTime?
  closed_at       DateTime?
  
  // Foreign keys
  created_by_id   Int
  assignee_id     Int?
  priority_id     Int
  
  // Relations
  created_by      User      @relation("TicketCreatedBy", fields: [created_by_id], references: [id], onDelete: Cascade)
  assignee        User?     @relation("TicketAssignedTo", fields: [assignee_id], references: [id], onDelete: SetNull)
  priority        TicketPriority @relation(fields: [priority_id], references: [id], onDelete: Restrict)
  comments        Comment[]
  ticket_events   TicketEvent[]
  attachments     Attachment[]
  tags            TicketTag[]

  @@map("tickets")
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  is_internal Boolean  @default(false)
  created_at  DateTime @default(now()) @map("created_at")
  
  // Foreign keys
  ticket_id   Int
  author_id   Int
  
  // Relations
  ticket      Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  author      User   @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@map("comments")
}

model TicketEvent {
  id           Int      @id @default(autoincrement())
  change_type  String
  old_value    String?
  new_value    String?
  created_at   DateTime @default(now()) @map("created_at")
  
  // Foreign keys
  ticket_id    Int
  user_id      Int
  
  // Relations
  ticket       Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  user         User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("ticket_events")
}

model Attachment {
  id                Int      @id @default(autoincrement())
  original_filename String
  stored_filename   String
  mime_type         String
  size              BigInt
  uploaded_at       DateTime @default(now()) @map("uploaded_at")
  
  // Foreign keys
  ticket_id         Int
  uploaded_by_id    Int
  
  // Relations
  ticket            Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  uploaded_by       User   @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model TicketPriority {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  tickets Ticket[]

  @@map("ticket_priority")
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  tickets   TicketTag[]

  @@map("tags")
}

model TicketTag {
  id        Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @map("created_at")
  
  // Foreign keys
  ticket_id Int
  tag_id    Int
  
  // Relations
  ticket    Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  tag       Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([ticket_id, tag_id])
  @@map("ticket_tags")
}

// Invitations for onboarding users by email with role assignment
model Invite {
  id         Int           @id @default(autoincrement())
  email      String
  role       UserRole
  token      String        @unique
  expires_at DateTime      @map("expires_at")
  status     InviteStatus  @default(PENDING)
  created_at DateTime      @default(now()) @map("created_at")
  accepted_at DateTime?    @map("accepted_at")

  @@index([email])
  @@map("invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REVOKED
  EXPIRED
}